https://github.com/misamoylov/otus-qa.git

Looping Techniques
Iterators
Generators
Работа с файлами
Context managers

***********************

Контейнеры – это структуры данных, которые хранят элементы. Данные структуры данных хранятся в памяти и их содержимое тоже. Примеры контейнеров:
Списки, очереди
Множества
Словари
Строки (можно итерировать)
Кортежи


Ключевые слова: 
else - выполняется после if/elif
break - прекращается цикл
continue - начинается новая итерация
pass - заглушка

For/while

**********************

Что происходит когда мы итерируемся используя for:
Вызывается метод iter() для получения итератора для “a”
Вызывается метод next() для получения каждого элемента из итератора по 
очереди
Выход из цикла, когда метод next() выбрасывает исключение StopIteration


Iterable – Объект, способный возвращать элементы по одному
у него есть __iter__() (iterator protocol) или __getitem__() (sequence protocol)
вызов iter() превращает в итератор
for вызывает iter() неявно, сохраняет итератор в безымянной переменной
Iteration – итерирование, цикличный процесс извлечения данных, объектов из коллекции (объекта итерации)
Iterator – Объект, представляющий последовательность данных
Содержит __iter__(), который возвращает себя же
Iterator так же iterable
Завершается после raise StopIteration

Алгоритм- некая последовательность действий и условий
Протокол- набор правил по которым работает алгоритм

iter создаёт объект iterator. next дёргает его

**********************

Функция, которая возвращает итератор:
В ней есть yield
После использования выкидывает StopIteration (т.е. использовать можно один раз)
Может использовать next()
Хранит промежуточные состояния между вызовами yield

yield делает из функции генератор (выполняется функция, yield останавливает функцию и возвращает результат как генератор)

Что такое yield - https://www.youtube.com/watch?v=ZjaVrzOkpZk

https://habr.com/ru/post/132554/

Yield
Если yield внутри функции, то она вернет генератор
Функция будет вызвана при начале итерирования
Yield возвращает результат как элеменет генератора
Yield останавливает функцию до следующей итерации (вызова метода next())
Функция продолжает работы с предыдущего yield (с предшествующего состояния)

при использовании генератора, в память не грузится сразу весь объект, а только текущий шаг

**********************
Типы файлов:

Бинарные – любой другой файл, кроме текста, который может быть использован другим приложением. Другими словами бинарный файл нужен для других приложений.
Текстовые – структурированная последовательность линий, каждая линия состоит из последовательности символов
Каждая линия заканчивается символом EOL – end of line. (не все редакторы его показывают, но он есть)
Текстовый файл для людей, бинарный для приложений.

***********************
Режим	Обозначение
'r'	открытие на чтение (является значением по умолчанию).
'w'	открытие на запись, содержимое файла удаляется, если файла не существует, создается новый.
'x'	открытие на запись, если файла не существует, иначе исключение.
'a'	открытие на дозапись, информация добавляется в конец файла.
'b'	открытие в двоичном режиме.
't'	открытие в текстовом режиме (является значением по умолчанию).
'+'	открытие на чтение и запись

read читает все, readline построчно



***********************
Links
https://habr.com/ru/post/132554/
https://realpython.com/python-for-loop/
https://anandology.com/python-practice-book/iterators.html
https://wiki.python.org/moin/Generators
https://www.pythonforbeginners.com/files/reading-and-writing-files-in-python
https://nvie.com/posts/iterators-vs-generators/
www.dabeaz.com/generators-uk/
http://www.dabeaz.com/generators/Generators.pdf
https://realpython.com/working-with-files-in-python/#traversing-directories-and-processing-files
https://www.w3schools.com/python/python_json.asp
